Glossary of Terms:
* Event: Central to system communication. Events are generated by sensors and by eventQueueInterfaces. Events communicate data through the system
* Sensor: A eventQueueInterface without an event handler
* Service: A package for event generators and handlers, static representation of what we want to do. A eventQueueInterface listens for events on the event queue and uses the data to make inferences about the world. A eventQueueInterface can generate new events when it wants to communicate information to the outside world.
* Event Handler: Is part of a eventQueueInterface. Gets registered on the event queue. Can conditionally fire based on if the new event in the queue meets the requirements/parameters for the event.
* Event Provider: Is part of a eventQueueInterface. Abstract concept for a system to send events to the event queue.
* Request Service: Service that handles request fufillment and confirmation. As well as ensuring that requests are completed even if an actuator goes down.
* Engine: Contains the application. Has an event queue and registers eventQueueInterfaces to the event queue. -Current plan is to only allow eventQueueInterfaces to be added and removed.

Deprecated
* Actuator: Special case of a eventQueueInterface where sending it an event can cause it to take an action on the real world. Usually only sends confirmation/completion api.event_queue.